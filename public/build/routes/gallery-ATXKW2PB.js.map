{
  "version": 3,
  "sources": ["../../../app/routes/gallery.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/gallery.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/gallery.tsx\");\n  import.meta.hot.lastModified = \"1742545110218.2566\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"@remix-run/react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"~/components/ui/Card\";\nimport { Button } from \"~/components/ui/Button\";\nexport default function Gallery() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  useEffect(() => {\n    // Retrieve images from sessionStorage that were saved on the previous page\n    console.log(\"Gallery component mounted, retrieving stored images\");\n    const storedImages = sessionStorage.getItem(\"uploadedImages\");\n    if (storedImages) {\n      try {\n        const parsedImages = JSON.parse(storedImages);\n        console.log(`Found ${parsedImages.length} images in storage`);\n        setImages(parsedImages);\n\n        // Select first image by default if available\n        if (parsedImages.length > 0) {\n          setSelectedImage(parsedImages[0]);\n        }\n      } catch (error) {\n        console.error(\"Error parsing stored images:\", error);\n      }\n    } else {\n      console.log(\"No images found in storage\");\n    }\n  }, []);\n  const handleImageSelect = image => {\n    setSelectedImage(image);\n  };\n  return <div className=\"max-w-4xl mx-auto p-4 md:p-8\">\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Photo Gallery</CardTitle>\n        </CardHeader>\n\n        <CardContent>\n          {/* Image row at the top */}\n          <div className=\"flex gap-4 overflow-x-auto p-4 bg-slate-100 rounded-lg mb-6 min-h-24 items-center scrollbar-thin\">\n            {images.length > 0 ? images.map((image, index) => <div key={index} className={`flex-none w-20 h-20 rounded overflow-hidden cursor-pointer transition-all hover:-translate-y-1 ${selectedImage === image ? \"border-2 border-blue-600 shadow-md\" : \"border-2 border-transparent\"}`} onClick={() => handleImageSelect(image)} onKeyDown={e => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              handleImageSelect(image);\n            }\n          }} tabIndex={0} role=\"button\" aria-label={`Select image ${image.name}`}>\n                  <img src={image.url} alt={image.name} className=\"w-full h-full object-cover\" />\n                </div>) : <div className=\"w-full text-center text-slate-500\">\n                <p>No images uploaded</p>\n              </div>}\n          </div>\n\n          {/* Selected image display */}\n          {selectedImage && <div className=\"flex flex-col md:flex-row gap-8 mb-8\">\n              <div className=\"polaroid w-72 h-auto mx-auto md:mx-0\">\n                <div className=\"h-64 w-full overflow-hidden bg-slate-100 mb-4\">\n                  <img src={selectedImage.url} alt={selectedImage.name} className=\"w-full h-full object-contain\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-slate-600 truncate\">\n                    {selectedImage.name}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex-1 bg-slate-50 p-6 rounded-lg border border-slate-200\">\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">File name:</span>{\" \"}\n                  {selectedImage.name}\n                </p>\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">Type:</span>{\" \"}\n                  {selectedImage.type}\n                </p>\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">Size:</span>{\" \"}\n                  {Math.round(selectedImage.size / 1024)} KB\n                </p>\n              </div>\n            </div>}\n\n          <div className=\"mt-4\">\n            <Button variant=\"secondary\" className=\"w-full sm:w-auto\" asChild>\n              <Link to=\"/\">Back to Upload</Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>;\n}\n_s(Gallery, \"kKDvgZCLpyq/6Bz6LreGji6fUo0=\");\n_c = Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
