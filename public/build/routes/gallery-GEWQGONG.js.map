{
  "version": 3,
  "sources": ["../../../app/routes/gallery.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/gallery.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/gallery.tsx\");\n  import.meta.hot.lastModified = \"1742548752030.279\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"@remix-run/react\"; // Import useNavigate here\nimport { Card, CardHeader, CardTitle, CardContent } from \"~/components/ui/Card\";\nimport { Button } from \"~/components/ui/Button\";\nexport default function Gallery() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [loadError, setLoadError] = useState(null);\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  useEffect(() => {\n    // Retrieve images from sessionStorage that were saved on the previous page\n    console.log(\"Gallery component mounted, retrieving stored images\");\n    const storedImages = sessionStorage.getItem(\"uploadedImages\");\n    if (storedImages) {\n      try {\n        const parsedImages = JSON.parse(storedImages);\n        console.log(`Found ${parsedImages.length} images in storage`);\n        if (parsedImages.length === 0) {\n          setLoadError(\"No images were found. Please upload some images first.\");\n          return;\n        }\n        setImages(parsedImages);\n\n        // Select first image by default if available\n        if (parsedImages.length > 0) {\n          setSelectedImage(parsedImages[0]);\n          setCurrentImageIndex(0);\n        }\n      } catch (error) {\n        console.error(\"Error parsing stored images:\", error);\n        setLoadError(\"There was an error loading your images. Please try uploading them again.\");\n      }\n    } else {\n      console.log(\"No images found in storage\");\n      setLoadError(\"No images were found. Please upload some images first.\");\n\n      // Auto redirect back to upload page after a short delay\n      const timer = setTimeout(() => {\n        navigate(\"/\");\n      }, 2000);\n\n      // Clear the timeout if the component unmounts\n      return () => clearTimeout(timer);\n    }\n  }, [navigate]);\n  const handleImageSelect = (image, index) => {\n    setSelectedImage(image);\n    setCurrentImageIndex(index);\n  };\n  const navigateNext = () => {\n    if (images.length === 0) return;\n    const nextIndex = (currentImageIndex + 1) % images.length;\n    setSelectedImage(images[nextIndex]);\n    setCurrentImageIndex(nextIndex);\n  };\n  const navigatePrevious = () => {\n    if (images.length === 0) return;\n    const prevIndex = (currentImageIndex - 1 + images.length) % images.length;\n    setSelectedImage(images[prevIndex]);\n    setCurrentImageIndex(prevIndex);\n  };\n\n  // Function to download the current image\n  const downloadImage = () => {\n    if (!selectedImage) return;\n\n    // Create an invisible anchor element\n    const a = document.createElement(\"a\");\n    a.href = selectedImage.url;\n    a.download = selectedImage.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n  return <div className=\"max-w-4xl mx-auto p-4 md:p-8\">\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Photo Gallery</CardTitle>\n        </CardHeader>\n\n        <CardContent>\n          {/* Error message display */}\n          {loadError && <div className=\"mb-6 p-4 bg-amber-50 border border-amber-200 text-amber-700 rounded-md\">\n              <div className=\"flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <div>\n                  <p>{loadError}</p>\n                  <p className=\"text-sm mt-1\">Redirecting to upload page...</p>\n                </div>\n              </div>\n            </div>}\n\n          {/* Image navigation buttons */}\n          {images.length > 1 && selectedImage && !loadError && <div className=\"flex justify-between items-center mb-4\">\n              <Button variant=\"secondary\" onClick={navigatePrevious} aria-label=\"Previous image\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                Previous\n              </Button>\n              <span className=\"text-sm text-slate-500\">\n                Image {currentImageIndex + 1} of {images.length}\n              </span>\n              <Button variant=\"secondary\" onClick={navigateNext} aria-label=\"Next image\">\n                Next\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </Button>\n            </div>}\n\n          {/* Image row at the top */}\n          <div className=\"flex gap-4 overflow-x-auto p-4 bg-slate-100 rounded-lg mb-6 min-h-24 items-center scrollbar-thin\">\n            {images.length > 0 ? images.map((image, index) => <div key={index} className={`flex-none w-20 h-20 rounded overflow-hidden cursor-pointer transition-all hover:-translate-y-1 ${selectedImage === image ? \"border-2 border-blue-600 shadow-md\" : \"border-2 border-transparent\"}`} onClick={() => handleImageSelect(image, index)} onKeyDown={e => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              handleImageSelect(image, index);\n            }\n          }} tabIndex={0} role=\"button\" aria-label={`Select image ${image.name}`} aria-selected={selectedImage === image}>\n                  <img src={image.url} alt={image.name} className=\"w-full h-full object-cover\" />\n                </div>) : <div className=\"w-full text-center text-slate-500\">\n                <p>No images uploaded</p>\n              </div>}\n          </div>\n\n          {/* Selected image display */}\n          {selectedImage && <div className=\"flex flex-col md:flex-row gap-8 mb-8\">\n              <div className=\"w-72 h-auto mx-auto md:mx-0\">\n                <div className=\"h-64 w-full overflow-hidden bg-slate-100 mb-4\">\n                  <img src={selectedImage.url} alt={selectedImage.name} className=\"w-full h-full object-contain\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-slate-600 truncate\">\n                    {selectedImage.name}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex-1 bg-slate-50 p-6 rounded-lg border border-slate-200\">\n                <h3 className=\"text-lg font-medium text-slate-800 mb-4\">\n                  Image Details\n                </h3>\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">File name:</span>{\" \"}\n                  {selectedImage.name}\n                </p>\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">Type:</span>{\" \"}\n                  {selectedImage.type}\n                </p>\n                <p className=\"my-3\">\n                  <span className=\"font-medium\">Size:</span>{\" \"}\n                  {Math.round(selectedImage.size / 1024)} KB\n                </p>\n\n                <div className=\"mt-6 flex gap-3\">\n                  <Button variant=\"primary\" onClick={downloadImage} className=\"flex items-center gap-2\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n                    </svg>\n                    Download\n                  </Button>\n                </div>\n              </div>\n            </div>}\n\n          <div className=\"mt-4 flex justify-between\">\n            <Button variant=\"secondary\" className=\"w-full sm:w-auto\" asChild>\n              <Link to=\"/\">Back to Upload</Link>\n            </Button>\n\n            {/* Clear all button */}\n            {images.length > 0 && <Button variant=\"outline\" className=\"w-full sm:w-auto ml-2\" onClick={() => {\n            sessionStorage.removeItem(\"uploadedImages\");\n            setImages([]);\n            setSelectedImage(null);\n          }}>\n                Clear All\n              </Button>}\n          </div>\n        </CardContent>\n      </Card>\n    </div>;\n}\n_s(Gallery, \"lj/xbhubuWaiLv/Afp2v41xa5q8=\", false, function () {\n  return [useNavigate];\n});\n_c = Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
