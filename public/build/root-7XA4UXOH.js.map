{
  "version": 3,
  "sources": ["../../app/root.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n}\n// REMIX HMR END\n\nimport { useEffect } from \"react\";\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from \"@remix-run/react\";\nimport styles from \"~/styles/app.css\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: styles\n}\n// Add any other stylesheets, fonts, etc. here\n];\n\n// This function runs on the server to get initial theme\nexport async function loader({\n  request\n}) {\n  // You could read cookies here to determine initial theme\n  // For now, we'll just return a default\n  return {\n    theme: \"system\"\n  };\n}\nexport default function App() {\n  _s();\n  const {\n    theme\n  } = useLoaderData();\n\n  // Set up theme on initial page load\n  useEffect(() => {\n    // Check for stored theme preference\n    const storedTheme = localStorage.getItem(\"theme\") || theme;\n    if (storedTheme === \"dark\" || storedTheme === \"system\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [theme]);\n  return <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"min-h-screen bg-background text-foreground\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>;\n}\n_s(App, \"B7A+WOBAadcVhl+25kUT4d+cAwY=\", false, function () {\n  return [useLoaderData];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,mBAA0B;;;;;;AAsClB;AAzDR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AAChB;AAMO,IAAM,QAAQ,MAAM;AAAA,EAAC;AAAA,IAC1B,KAAK;AAAA,IACL,MAAM;AAAA,EACR;AAAA;AAEA;AAYe,SAAR,MAAuB;AAC5B,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAGlB,8BAAU,MAAM;AAEd,UAAM,cAAc,aAAa,QAAQ,OAAO,KAAK;AACrD,QAAI,gBAAgB,UAAU,gBAAgB,YAAY,OAAO,WAAW,8BAA8B,EAAE,SAAS;AACnH,eAAS,gBAAgB,UAAU,IAAI,MAAM;AAAA,IAC/C,OAAO;AACL,eAAS,gBAAgB,UAAU,OAAO,MAAM;AAAA,IAClD;AAAA,EACF,GAAG,CAAC,KAAK,CAAC;AACV,SAAO,mDAAC,UAAK,MAAK,MAAK,0BAAwB,MAC3C;AAAA,uDAAC,UACC;AAAA,yDAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UAAK,WAAU,8CACd;AAAA,yDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SAJd;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAZG;AAAA;AAAA;AAAA;AAAA,SAaL;AACJ;AACA,GAAG,KAAK,gCAAgC,OAAO,WAAY;AACzD,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,KAAK;AAEtB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
